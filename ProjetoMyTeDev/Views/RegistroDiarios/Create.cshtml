@using Microsoft.AspNetCore.Identity
@using ProjetoMyTeDev.Areas.Identity.Data
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject IAntiforgery antiforgery

@model ProjetoMyTeDev.Models.RegistroDiario
@{
    var token = antiforgery.GetAndStoreTokens(Context).RequestToken;

    ViewData["Title"] = "Cadastrar Registro";

    DateOnly data = DateOnly.FromDateTime(DateTime.Now);

    string dataFormatada = DateTime.Today.ToString("dddd", System.Globalization.CultureInfo.CreateSpecificCulture("pt-BR")) + ", " + data.ToString("dd / MM / yyyy");
    List<DateOnly> QuinzenaAtual = new List<DateOnly>();

    int diaInicial = (data.Day <= 15) ? 1 : 16;
    int diaFinal = (data.Day <= 15) ? 15 : DateTime.DaysInMonth(data.Year, data.Month);

    for (int dia = diaInicial; dia <= diaFinal; dia++)
    {
        QuinzenaAtual.Add(new DateOnly(data.Year, data.Month, dia));
    }

    var registros = new RegistroDiario[] { };
}


<div class="row my-4">
    <h2 class="col">Cadastre suas horas</h2>
    <div class="col text-end">@dataFormatada</div>
</div>

<div class="row mb-5">
    <div class="col">
        <h6>
            @QuinzenaAtual[0].ToString("dd/MM/yyyy") - @QuinzenaAtual[^1].ToString("dd/MM/yyyy")
        </h6>
    </div>
    <div class="toast align-items-center border-0 bg-danger text-light float-end position-fixed" style="top: 20%; left:65%;" role="alert" aria-live="assertive" aria-atomic="true" id="daily-register-toast">
        <div class="d-flex">
            <div class="toast-body">
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
    </div>
    <div class="col">
        <button id="salvar-horas" class="btn btn-secondary float-end"><i class="bi bi-floppy2-fill"></i> &ensp; Salvar</button>
    </div>
</div>
<table class="table text-center">
    <thead class="">
        <tr>
            <th>WBS</th>
            @foreach (var dia in QuinzenaAtual)
            {

                @if (dia.DayOfWeek.ToString() == "Saturday" || dia.DayOfWeek.ToString() == "Sunday")
                {
                    <th class="text-muted" style="background-color: #E8E8E8;">@Html.Raw(ViewBag.usuario.Localidade)</th>
                }
                else
                {
                    <th style="color: #d15917;">@Html.Raw(ViewBag.usuario.Localidade)</th>
                }
            }
        </tr>
        <tr>
            <th></th>
            @foreach (var dia in QuinzenaAtual)
            {
                <span class="d-none">@dia</span>
                @if (dia.DayOfWeek.ToString() == "Saturday" || dia.DayOfWeek.ToString() == "Sunday")
                {
                    <th scope="col" class="text-muted" style="background-color: #E8E8E8;"><small class="fw-normal">@dia.DayOfWeek.ToString().Substring(0, 3)</small><br /><span>@dia.Day</span></th>
                }
                else
                {
                    <th scope="col"><small class="fw-normal">@dia.DayOfWeek.ToString().Substring(0, 3)</small><br /><span style="color: #d15917">@dia.Day</span></th>

                }
            }
        </tr>
    </thead>
    <tbody>
        @for (var linha = 0; linha < 5; linha++)
        {
            <tr>
                <th>
                    <select asp-for="WbsId" class="form-select wbs-select">
                        <option value="0" selected>Selecione a WBS</option>
                        @foreach (var item in ViewBag.Wbs)
                        {
                            <option value="@item.WbsId">
                                @Html.Raw(item.WbsCodigo) &ensp; @Html.Raw(item.WbsDescricao)
                            </option>
                        }
                    </select>
                </th>
                @foreach (var dia in QuinzenaAtual)
                {
                    @if (dia.DayOfWeek.ToString() == "Saturday" || dia.DayOfWeek.ToString() == "Sunday")
                    {
                        <td style="background-color: #E8E8E8;"><input class="form-control text-center registro-diario border-mutted" size="1" style="background-color: #E8E8E8; border-color: #f2f2f2;"></td>
                    }
                    else
                    {
                        <td scope="col"><input class="form-control text-center registro-diario" size="1" maxlength="1" /></td>
                    }
                }
            </tr>
        }
    </tbody>
    <tfooter>
        <tr>
            <th class="text-start">Total</th>
            @foreach (var dia in QuinzenaAtual)
            {
                @if (dia.DayOfWeek.ToString() == "Saturday" || dia.DayOfWeek.ToString() == "Sunday")
                {
                    <th style="background-color: #E8E8E8;"></th>
                }
                else
                {
                    <th></th>
                }
            }
        </tr>
    </tfooter>
</table>

<script>
    document.querySelector('#salvar-horas').addEventListener('click', async function (e) {
        e.preventDefault();

        let quinzenaAtual = [], wbs = [], horas = [], registros = [], registrosNoBanco = [];
        let erro = "", sabadosDomingos = 0, quinzenaPreenchida;

        const token = document.querySelector('input[name="__RequestVerificationToken"]').getAttribute("value");
        const FuncionarioId = '@ViewBag.usuario.Id';


        document.querySelectorAll('.d-none').forEach((dia, index) => {
            dia = dia.textContent;
            dia = new Date(dia.toString());

            if (dia.getDay() == 0 || dia.getDay() == 6)
                sabadosDomingos++;

            quinzenaAtual.push(dia);
        });

        await fetch(`/RegistroDiarios/Details/${FuncionarioId}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            }
        })
            .then(response => response.json())
            .then(data => {
                registrosNoBanco = data;
                quinzenaPreenchida = registrosNoBanco.some(r => {
                    r.data = new Date(r.data);

                    const dataEncontrada = quinzenaAtual.some(dia => {
                        return dia.toDateString() == r.data.toDateString();
                    });

                    return dataEncontrada;
                });
            })
            .catch(error => {
                console.error("Erro ao obter registros:", error);
            });

        if (quinzenaPreenchida) {
            erro = "Você já lançou as horas da quinzena atual."
        }

        if (erro != "") {
            exibirToast(erro);
            return;
        }

        document.querySelectorAll(".wbs-select").forEach((wbsSelect, index) => {
            let selectedOption = wbsSelect.options[wbsSelect.selectedIndex];

            if (selectedOption.value != "0") {
                wbs.push({ wbsId: selectedOption.value, row: index })
            }
        });

        wbs.forEach(codigo => {
            let wbsRepetidos = wbs.filter(w => w.wbsId == codigo.wbsId);

            if (wbsRepetidos.length > 1) {
                erro = "Uma WBS deve ser selecionada apenas uma vez."
                return;
            }
        });

        if (erro != "") {
            exibirToast(erro);
            return;
        }

        document.querySelectorAll(".registro-diario").forEach((DailyRegister, index) => {
            horas.push({
                id: index,
                hours: DailyRegister.value,
                row: Math.floor(index / quinzenaAtual.length),
                col: (index % quinzenaAtual.length)
            });
        });

        horas.forEach(hora => {
            if (hora.hours !== '') {
                let correspondente = wbs.find(wb => wb.row === hora.row);
                if (!correspondente) {
                    erro = "Selecione uma WBS válida para todos os registros";
                    return;
                }
            }
            if (hora.hours == '0') {
                erro = "Registro de horas inválido";
                return;
            }
        });

        if (erro != "") {
            exibirToast(erro);
            return;
        }

        horas.forEach(hora => {
            if (hora.hours != '') {
                let registro = {};
                registro.Horas = parseInt(hora.hours);
                registro.Data = new Date(quinzenaAtual[0].getFullYear(), quinzenaAtual[0].getMonth(), hora.col + quinzenaAtual[0].getDate());
                registro.Data = registro.Data.toJSON();
                registro.ApplicationUserId = FuncionarioId;
                registro.WbsId = wbs.find(e => e.row === hora.row).wbsId;
                registros.push(registro);
            }
        });

        registros.forEach(registro => {
            let diaRepetido = registros.filter(r => r.Data == registro.Data);

            if (diaRepetido.length > 1) {
                erro = "Um dia deve conter apenas um registro de horas";
                return;
            }
        });

        if (erro != "") {
            exibirToast(erro);
            return;
        }

        if (registros.length < quinzenaAtual.length - sabadosDomingos)
            erro = "Todos os dias úteis devem ser preenchidos."

        if (erro != "") {
            exibirToast(erro);
            return;
        }


        fetch(`/RegistroDiarios/Create`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                "RequestVerificationToken": token
            },
            body: JSON.stringify(registros)
        })
        // .then(result => {
        //     window.location = `/RegistroDiarios/`
        // })
    })



    function exibirToast(erro) {
        let toastHTMLElement = document.querySelector("#daily-register-toast");
        let toastBody = document.querySelector(".toast-body");
        toastBody.innerHTML = erro;
        let toastElement = new bootstrap.Toast(toastHTMLElement);
        toastElement.show();
    }

</script>